
Math_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000dd2  00000e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008a  0080008a  00000e90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cda  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a46  00000000  00000000  00002d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b3  00000000  00000000  0000377c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00004b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c8  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020ba  00000000  00000000  00005764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000781e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  8a:	0c 94 e7 06 	jmp	0xdce	; 0xdce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <calc>:
		
	}
}

s32 calc (s32 n1,s32 n2,u8 op)
{s32 res=0;
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	69 01       	movw	r12, r18
  9e:	7a 01       	movw	r14, r20
	switch (op)
  a0:	0b 32       	cpi	r16, 0x2B	; 43
  a2:	49 f0       	breq	.+18     	; 0xb6 <calc+0x24>
  a4:	18 f4       	brcc	.+6      	; 0xac <calc+0x1a>
  a6:	0a 32       	cpi	r16, 0x2A	; 42
  a8:	59 f0       	breq	.+22     	; 0xc0 <calc+0x2e>
  aa:	1b c0       	rjmp	.+54     	; 0xe2 <calc+0x50>
  ac:	0d 32       	cpi	r16, 0x2D	; 45
  ae:	a1 f0       	breq	.+40     	; 0xd8 <calc+0x46>
  b0:	0f 32       	cpi	r16, 0x2F	; 47
  b2:	69 f0       	breq	.+26     	; 0xce <calc+0x3c>
  b4:	16 c0       	rjmp	.+44     	; 0xe2 <calc+0x50>
	{
		case '+':
		res=n1+n2;
  b6:	62 0f       	add	r22, r18
  b8:	73 1f       	adc	r23, r19
  ba:	84 1f       	adc	r24, r20
  bc:	95 1f       	adc	r25, r21
		break;
  be:	14 c0       	rjmp	.+40     	; 0xe8 <calc+0x56>
		case '*':
		res=n1*n2;
  c0:	9b 01       	movw	r18, r22
  c2:	ac 01       	movw	r20, r24
  c4:	c7 01       	movw	r24, r14
  c6:	b6 01       	movw	r22, r12
  c8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__mulsi3>
		break;
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <calc+0x56>
		case '/':
		res=n1/n2;
  ce:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divmodsi4>
  d2:	ca 01       	movw	r24, r20
  d4:	b9 01       	movw	r22, r18
		break;
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <calc+0x56>
		case '-':
		res=n1-n2;
  d8:	62 1b       	sub	r22, r18
  da:	73 0b       	sbc	r23, r19
  dc:	84 0b       	sbc	r24, r20
  de:	95 0b       	sbc	r25, r21
		break;
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <calc+0x56>
		
	}
}

s32 calc (s32 n1,s32 n2,u8 op)
{s32 res=0;
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	cb 01       	movw	r24, r22
		break;
		default:
		break;
	}
	return res;
  e8:	0f 91       	pop	r16
  ea:	ff 90       	pop	r15
  ec:	ef 90       	pop	r14
  ee:	df 90       	pop	r13
  f0:	cf 90       	pop	r12
  f2:	08 95       	ret

000000f4 <main>:

//n1 --> number1,n2 --> number2,op --> oprator
s32 calc (s32 n1,s32 n2,u8 op);//function of calculations

int main(void)
{u8 writenvalue;//the value from Keypad
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <main+0x6>
  fa:	00 d0       	rcall	.+0      	; 0xfc <main+0x8>
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	s32 n1=0,n2=0,res=0;
	u8 op=0;
	u8 opflag=0,n1flag=0,n2flag=0,eqflag=0;
	u8 negativeflagn1=0;u8 negativeflagn2=0;
	//initialization
	KEYPAD_init(KEYPAD_ONE);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <KEYPAD_init>
	LCD_4B_init(LCD_4B_ONE);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_4B_init>
	LCD_4B_sendCmnd(LCD_4B_ONE,CURSOR_ON_BLINKING_ON);
 10c:	6f e0       	ldi	r22, 0x0F	; 15
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
int main(void)
{u8 writenvalue;//the value from Keypad
	s32 n1=0,n2=0,res=0;
	u8 op=0;
	u8 opflag=0,n1flag=0,n2flag=0,eqflag=0;
	u8 negativeflagn1=0;u8 negativeflagn2=0;
 114:	1c 82       	std	Y+4, r1	; 0x04
 116:	1b 82       	std	Y+3, r1	; 0x03

int main(void)
{u8 writenvalue;//the value from Keypad
	s32 n1=0,n2=0,res=0;
	u8 op=0;
	u8 opflag=0,n1flag=0,n2flag=0,eqflag=0;
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	1a 82       	std	Y+2, r1	; 0x02
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	f1 2c       	mov	r15, r1
s32 calc (s32 n1,s32 n2,u8 op);//function of calculations

int main(void)
{u8 writenvalue;//the value from Keypad
	s32 n1=0,n2=0,res=0;
	u8 op=0;
 120:	31 2c       	mov	r3, r1
//n1 --> number1,n2 --> number2,op --> oprator
s32 calc (s32 n1,s32 n2,u8 op);//function of calculations

int main(void)
{u8 writenvalue;//the value from Keypad
	s32 n1=0,n2=0,res=0;
 122:	21 2c       	mov	r2, r1
 124:	c1 2c       	mov	r12, r1
 126:	d1 2c       	mov	r13, r1
 128:	e1 2c       	mov	r14, r1
 12a:	41 2c       	mov	r4, r1
 12c:	51 2c       	mov	r5, r1
 12e:	32 01       	movw	r6, r4
 130:	81 2c       	mov	r8, r1
 132:	91 2c       	mov	r9, r1
 134:	54 01       	movw	r10, r8
	KEYPAD_init(KEYPAD_ONE);
	LCD_4B_init(LCD_4B_ONE);
	LCD_4B_sendCmnd(LCD_4B_ONE,CURSOR_ON_BLINKING_ON);
	
	while (1)
	{KEYPAD_getValue(KEYPAD_ONE,&writenvalue);//read the value
 136:	be 01       	movw	r22, r28
 138:	6f 5f       	subi	r22, 0xFF	; 255
 13a:	7f 4f       	sbci	r23, 0xFF	; 255
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 16 02 	call	0x42c	; 0x42c <KEYPAD_getValue>
		if (writenvalue != KEYPAD_NOT_PRESSED)
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	8f 3f       	cpi	r24, 0xFF	; 255
 146:	b9 f3       	breq	.-18     	; 0x136 <main+0x42>
		{
			if (writenvalue == '=')
 148:	8d 33       	cpi	r24, 0x3D	; 61
 14a:	a9 f5       	brne	.+106    	; 0x1b6 <main+0xc2>
			{LCD_4B_sendCmnd(LCD_4B_ONE,DISP_ON);
 14c:	6c e0       	ldi	r22, 0x0C	; 12
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
				if (negativeflagn1 == 1)
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	49 f4       	brne	.+18     	; 0x16c <main+0x78>
				{
					n1=n1*(-1);negativeflagn1 =0;
 15a:	b0 94       	com	r11
 15c:	a0 94       	com	r10
 15e:	90 94       	com	r9
 160:	80 94       	com	r8
 162:	81 1c       	adc	r8, r1
 164:	91 1c       	adc	r9, r1
 166:	a1 1c       	adc	r10, r1
 168:	b1 1c       	adc	r11, r1
 16a:	1b 82       	std	Y+3, r1	; 0x03
				}
				if (negativeflagn2 == 1)
 16c:	8c 81       	ldd	r24, Y+4	; 0x04
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	49 f4       	brne	.+18     	; 0x184 <main+0x90>
				{
					n2=n2*(-1);negativeflagn2 =0;
 172:	70 94       	com	r7
 174:	60 94       	com	r6
 176:	50 94       	com	r5
 178:	40 94       	com	r4
 17a:	41 1c       	adc	r4, r1
 17c:	51 1c       	adc	r5, r1
 17e:	61 1c       	adc	r6, r1
 180:	71 1c       	adc	r7, r1
 182:	1c 82       	std	Y+4, r1	; 0x04
				}
				res=calc(n1,n2,op);
 184:	03 2d       	mov	r16, r3
 186:	a3 01       	movw	r20, r6
 188:	92 01       	movw	r18, r4
 18a:	c5 01       	movw	r24, r10
 18c:	b4 01       	movw	r22, r8
 18e:	0e 94 49 00 	call	0x92	; 0x92 <calc>
 192:	26 2e       	mov	r2, r22
 194:	c7 2e       	mov	r12, r23
 196:	d8 2e       	mov	r13, r24
 198:	e9 2e       	mov	r14, r25
				LCD_4B_goToSpecificPosition(LCD_4B_ONE,LCD_LINE_TWO,10);
 19a:	4a e0       	ldi	r20, 0x0A	; 10
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_4B_goToSpecificPosition>
				LCD_4B_writeNumber(LCD_4B_ONE,res);
 1a4:	42 2d       	mov	r20, r2
 1a6:	5c 2d       	mov	r21, r12
 1a8:	6d 2d       	mov	r22, r13
 1aa:	7e 2d       	mov	r23, r14
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 70 04 	call	0x8e0	; 0x8e0 <LCD_4B_writeNumber>
				eqflag=1;
 1b2:	01 e0       	ldi	r16, 0x01	; 1
 1b4:	c0 cf       	rjmp	.-128    	; 0x136 <main+0x42>
			}else if ((writenvalue == '+') || (writenvalue == '-') || (writenvalue == '*') || (writenvalue == '/'))
 1b6:	8b 32       	cpi	r24, 0x2B	; 43
 1b8:	39 f0       	breq	.+14     	; 0x1c8 <main+0xd4>
 1ba:	8d 32       	cpi	r24, 0x2D	; 45
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <main+0xd4>
 1be:	8a 32       	cpi	r24, 0x2A	; 42
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <main+0xd4>
 1c2:	8f 32       	cpi	r24, 0x2F	; 47
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <main+0xd4>
 1c6:	75 c0       	rjmp	.+234    	; 0x2b2 <main+0x1be>
			{LCD_4B_sendCmnd(LCD_4B_ONE,CURSOR_ON_BLINKING_ON);
 1c8:	6f e0       	ldi	r22, 0x0F	; 15
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
				if (opflag == 1 && n2flag == 1 )
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	f8 12       	cpse	r15, r24
 1d4:	27 c0       	rjmp	.+78     	; 0x224 <main+0x130>
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	21 f5       	brne	.+72     	; 0x224 <main+0x130>
				{
					if (negativeflagn1 == 1)
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	49 f4       	brne	.+18     	; 0x1f4 <main+0x100>
					{
						n1=n1*(-1);negativeflagn1 =0;
 1e2:	b0 94       	com	r11
 1e4:	a0 94       	com	r10
 1e6:	90 94       	com	r9
 1e8:	80 94       	com	r8
 1ea:	81 1c       	adc	r8, r1
 1ec:	91 1c       	adc	r9, r1
 1ee:	a1 1c       	adc	r10, r1
 1f0:	b1 1c       	adc	r11, r1
 1f2:	1b 82       	std	Y+3, r1	; 0x03
					}
					if (negativeflagn2 == 1)
 1f4:	8c 81       	ldd	r24, Y+4	; 0x04
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	49 f4       	brne	.+18     	; 0x20c <main+0x118>
					{
						n2=n2*(-1);negativeflagn2 =0;
 1fa:	70 94       	com	r7
 1fc:	60 94       	com	r6
 1fe:	50 94       	com	r5
 200:	40 94       	com	r4
 202:	41 1c       	adc	r4, r1
 204:	51 1c       	adc	r5, r1
 206:	61 1c       	adc	r6, r1
 208:	71 1c       	adc	r7, r1
 20a:	1c 82       	std	Y+4, r1	; 0x04
					}
					
					res=calc(n1,n2,op);
 20c:	03 2d       	mov	r16, r3
 20e:	a3 01       	movw	r20, r6
 210:	92 01       	movw	r18, r4
 212:	c5 01       	movw	r24, r10
 214:	b4 01       	movw	r22, r8
 216:	0e 94 49 00 	call	0x92	; 0x92 <calc>
 21a:	26 2e       	mov	r2, r22
 21c:	c7 2e       	mov	r12, r23
 21e:	d8 2e       	mov	r13, r24
 220:	e9 2e       	mov	r14, r25
					eqflag = 1;
 222:	01 e0       	ldi	r16, 0x01	; 1
				}
				if (eqflag == 1)
 224:	01 30       	cpi	r16, 0x01	; 1
 226:	a9 f4       	brne	.+42     	; 0x252 <main+0x15e>
				{
					n1=res;n2=0;
					LCD_4B_clear(LCD_4B_ONE);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_4B_clear>
					LCD_4B_writeNumber(LCD_4B_ONE,n1);	
 22e:	42 2d       	mov	r20, r2
 230:	5c 2d       	mov	r21, r12
 232:	6d 2d       	mov	r22, r13
 234:	7e 2d       	mov	r23, r14
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 70 04 	call	0x8e0	; 0x8e0 <LCD_4B_writeNumber>
					res=calc(n1,n2,op);
					eqflag = 1;
				}
				if (eqflag == 1)
				{
					n1=res;n2=0;
 23c:	82 2c       	mov	r8, r2
 23e:	9c 2c       	mov	r9, r12
 240:	ad 2c       	mov	r10, r13
 242:	be 2c       	mov	r11, r14
					LCD_4B_clear(LCD_4B_ONE);
					LCD_4B_writeNumber(LCD_4B_ONE,n1);	
					n1flag = 1; eqflag=0; opflag = 0;n2flag = 0;
 244:	00 e0       	ldi	r16, 0x00	; 0
 246:	1a 82       	std	Y+2, r1	; 0x02
 248:	11 e0       	ldi	r17, 0x01	; 1
 24a:	f1 2c       	mov	r15, r1
					res=calc(n1,n2,op);
					eqflag = 1;
				}
				if (eqflag == 1)
				{
					n1=res;n2=0;
 24c:	41 2c       	mov	r4, r1
 24e:	51 2c       	mov	r5, r1
 250:	32 01       	movw	r6, r4
					LCD_4B_clear(LCD_4B_ONE);
					LCD_4B_writeNumber(LCD_4B_ONE,n1);	
					n1flag = 1; eqflag=0; opflag = 0;n2flag = 0;
				}
						
				if (n1flag == 1 && eqflag==0 && opflag == 0)
 252:	11 30       	cpi	r17, 0x01	; 1
 254:	61 f4       	brne	.+24     	; 0x26e <main+0x17a>
 256:	01 11       	cpse	r16, r1
 258:	0a c0       	rjmp	.+20     	; 0x26e <main+0x17a>
 25a:	f1 10       	cpse	r15, r1
 25c:	08 c0       	rjmp	.+16     	; 0x26e <main+0x17a>
				{	LCD_4B_sendChar(LCD_4B_ONE,writenvalue);
 25e:	69 81       	ldd	r22, Y+1	; 0x01
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 10 04 	call	0x820	; 0x820 <LCD_4B_sendChar>
					opflag=1;
					op =writenvalue;
 266:	39 80       	ldd	r3, Y+1	; 0x01
					n1flag = 1; eqflag=0; opflag = 0;n2flag = 0;
				}
						
				if (n1flag == 1 && eqflag==0 && opflag == 0)
				{	LCD_4B_sendChar(LCD_4B_ONE,writenvalue);
					opflag=1;
 268:	ff 24       	eor	r15, r15
 26a:	f3 94       	inc	r15
					op =writenvalue;
 26c:	64 cf       	rjmp	.-312    	; 0x136 <main+0x42>
				}else if (n1flag == 0 && writenvalue == '-' && negativeflagn1==0)
 26e:	11 11       	cpse	r17, r1
 270:	0b c0       	rjmp	.+22     	; 0x288 <main+0x194>
 272:	69 81       	ldd	r22, Y+1	; 0x01
 274:	6d 32       	cpi	r22, 0x2D	; 45
 276:	41 f4       	brne	.+16     	; 0x288 <main+0x194>
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	81 11       	cpse	r24, r1
 27c:	05 c0       	rjmp	.+10     	; 0x288 <main+0x194>
				{
					LCD_4B_sendChar(LCD_4B_ONE,writenvalue);
 27e:	0e 94 10 04 	call	0x820	; 0x820 <LCD_4B_sendChar>
					negativeflagn1=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	8b 83       	std	Y+3, r24	; 0x03
 286:	57 cf       	rjmp	.-338    	; 0x136 <main+0x42>
				}else if (n1flag == 1 && opflag == 1 && writenvalue == '-' )
 288:	11 30       	cpi	r17, 0x01	; 1
 28a:	09 f0       	breq	.+2      	; 0x28e <main+0x19a>
 28c:	54 cf       	rjmp	.-344    	; 0x136 <main+0x42>
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	f8 12       	cpse	r15, r24
 292:	51 cf       	rjmp	.-350    	; 0x136 <main+0x42>
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	8d 32       	cpi	r24, 0x2D	; 45
 298:	09 f0       	breq	.+2      	; 0x29c <main+0x1a8>
 29a:	4d cf       	rjmp	.-358    	; 0x136 <main+0x42>
				{
					LCD_4B_sendChar(LCD_4B_ONE,'(');
 29c:	68 e2       	ldi	r22, 0x28	; 40
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 10 04 	call	0x820	; 0x820 <LCD_4B_sendChar>
					LCD_4B_sendChar(LCD_4B_ONE,writenvalue);
 2a4:	69 81       	ldd	r22, Y+1	; 0x01
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 10 04 	call	0x820	; 0x820 <LCD_4B_sendChar>
					negativeflagn2=1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	8c 83       	std	Y+4, r24	; 0x04
 2b0:	42 cf       	rjmp	.-380    	; 0x136 <main+0x42>
				}else
				{
					//nothing
				}
			}else if (writenvalue == 'C')
 2b2:	83 34       	cpi	r24, 0x43	; 67
 2b4:	91 f4       	brne	.+36     	; 0x2da <main+0x1e6>
			{
				LCD_4B_clear(LCD_4B_ONE);
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_4B_clear>
				n2=0;n1=0;res=0;
				opflag=0;n1flag =0;n2flag =0;eqflag=0;
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	1a 82       	std	Y+2, r1	; 0x02
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	f1 2c       	mov	r15, r1
					//nothing
				}
			}else if (writenvalue == 'C')
			{
				LCD_4B_clear(LCD_4B_ONE);
				n2=0;n1=0;res=0;
 2c4:	21 2c       	mov	r2, r1
 2c6:	c1 2c       	mov	r12, r1
 2c8:	d1 2c       	mov	r13, r1
 2ca:	e1 2c       	mov	r14, r1
 2cc:	41 2c       	mov	r4, r1
 2ce:	51 2c       	mov	r5, r1
 2d0:	32 01       	movw	r6, r4
 2d2:	81 2c       	mov	r8, r1
 2d4:	91 2c       	mov	r9, r1
 2d6:	54 01       	movw	r10, r8
 2d8:	2e cf       	rjmp	.-420    	; 0x136 <main+0x42>
				opflag=0;n1flag =0;n2flag =0;eqflag=0;
				
			}else //the numbers(0:9)
			{LCD_4B_sendCmnd(LCD_4B_ONE,CURSOR_ON_BLINKING_ON);
 2da:	6f e0       	ldi	r22, 0x0F	; 15
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
				if (eqflag == 1)
 2e2:	01 30       	cpi	r16, 0x01	; 1
 2e4:	29 f4       	brne	.+10     	; 0x2f0 <main+0x1fc>
				{	
					LCD_4B_clear(LCD_4B_ONE);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LCD_4B_clear>
					eqflag = 0;
 2ec:	00 e0       	ldi	r16, 0x00	; 0
					opflag = 0;
 2ee:	f1 2c       	mov	r15, r1
				}
				
				if (eqflag == 0)
 2f0:	01 11       	cpse	r16, r1
 2f2:	21 cf       	rjmp	.-446    	; 0x136 <main+0x42>
				{
					LCD_4B_sendChar(LCD_4B_ONE,writenvalue);
 2f4:	69 81       	ldd	r22, Y+1	; 0x01
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 10 04 	call	0x820	; 0x820 <LCD_4B_sendChar>
					if (opflag == 1)
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	f8 12       	cpse	r15, r24
 300:	2d c0       	rjmp	.+90     	; 0x35c <main+0x268>
					{
						if (n2flag == 1)
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	f1 f4       	brne	.+60     	; 0x344 <main+0x250>
						{
							n2=n2*10+(writenvalue-'0');
 308:	44 0c       	add	r4, r4
 30a:	55 1c       	adc	r5, r5
 30c:	66 1c       	adc	r6, r6
 30e:	77 1c       	adc	r7, r7
 310:	d3 01       	movw	r26, r6
 312:	c2 01       	movw	r24, r4
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	aa 1f       	adc	r26, r26
 322:	bb 1f       	adc	r27, r27
 324:	48 0e       	add	r4, r24
 326:	59 1e       	adc	r5, r25
 328:	6a 1e       	adc	r6, r26
 32a:	7b 1e       	adc	r7, r27
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	c0 97       	sbiw	r24, 0x30	; 48
 332:	09 2e       	mov	r0, r25
 334:	00 0c       	add	r0, r0
 336:	aa 0b       	sbc	r26, r26
 338:	bb 0b       	sbc	r27, r27
 33a:	48 0e       	add	r4, r24
 33c:	59 1e       	adc	r5, r25
 33e:	6a 1e       	adc	r6, r26
 340:	7b 1e       	adc	r7, r27
 342:	f9 ce       	rjmp	.-526    	; 0x136 <main+0x42>
						}else
						{
							n2 = writenvalue-'0';
 344:	49 80       	ldd	r4, Y+1	; 0x01
 346:	51 2c       	mov	r5, r1
 348:	80 e3       	ldi	r24, 0x30	; 48
 34a:	48 1a       	sub	r4, r24
 34c:	51 08       	sbc	r5, r1
 34e:	05 2c       	mov	r0, r5
 350:	00 0c       	add	r0, r0
 352:	66 08       	sbc	r6, r6
 354:	77 08       	sbc	r7, r7
							n2flag =1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	8a 83       	std	Y+2, r24	; 0x02
 35a:	ed ce       	rjmp	.-550    	; 0x136 <main+0x42>
						}
						
						
					}else
					{
						if (n1flag == 1)
 35c:	11 30       	cpi	r17, 0x01	; 1
 35e:	f1 f4       	brne	.+60     	; 0x39c <main+0x2a8>
						{
							n1=n1*10+(writenvalue-'0');
 360:	88 0c       	add	r8, r8
 362:	99 1c       	adc	r9, r9
 364:	aa 1c       	adc	r10, r10
 366:	bb 1c       	adc	r11, r11
 368:	d5 01       	movw	r26, r10
 36a:	c4 01       	movw	r24, r8
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	aa 1f       	adc	r26, r26
 372:	bb 1f       	adc	r27, r27
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	aa 1f       	adc	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	88 0e       	add	r8, r24
 37e:	99 1e       	adc	r9, r25
 380:	aa 1e       	adc	r10, r26
 382:	bb 1e       	adc	r11, r27
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	c0 97       	sbiw	r24, 0x30	; 48
 38a:	09 2e       	mov	r0, r25
 38c:	00 0c       	add	r0, r0
 38e:	aa 0b       	sbc	r26, r26
 390:	bb 0b       	sbc	r27, r27
 392:	88 0e       	add	r8, r24
 394:	99 1e       	adc	r9, r25
 396:	aa 1e       	adc	r10, r26
 398:	bb 1e       	adc	r11, r27
 39a:	cd ce       	rjmp	.-614    	; 0x136 <main+0x42>
						}else
						{
							n1 = writenvalue-'0';
 39c:	89 80       	ldd	r8, Y+1	; 0x01
 39e:	91 2c       	mov	r9, r1
 3a0:	80 e3       	ldi	r24, 0x30	; 48
 3a2:	88 1a       	sub	r8, r24
 3a4:	91 08       	sbc	r9, r1
 3a6:	09 2c       	mov	r0, r9
 3a8:	00 0c       	add	r0, r0
 3aa:	aa 08       	sbc	r10, r10
 3ac:	bb 08       	sbc	r11, r11
							n1flag =1;
 3ae:	11 e0       	ldi	r17, 0x01	; 1
 3b0:	c2 ce       	rjmp	.-636    	; 0x136 <main+0x42>

000003b2 <KEYPAD_init>:
extern u8 COL_Pins[KEYPAD_COLPINSNUM*KEYPAD_NUM];

/*************** APIS ***************/

KEYPAD_ErrorStatus_t KEYPAD_init (u8 KEYPADId)
{
 3b2:	cf 93       	push	r28
	if (KEYPADId < KEYPAD_NUM)
 3b4:	88 23       	and	r24, r24
 3b6:	89 f0       	breq	.+34     	; 0x3da <KEYPAD_init+0x28>
		{
			DIO_activePinInPullUpResistance(ROW_Ports[ROW_counter],ROW_Pins[ROW_counter]);
		}
	}else
	{
		return KEYPADIdError;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	36 c0       	rjmp	.+108    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{u8 ROW_counter=0,COL_counter=0;
		
		//ROWS >> input
		for (ROW_counter=0;ROW_counter<KEYPAD_ROWPINSNUM;ROW_counter++)
		{
			DIO_setPinDirection(ROW_Ports[ROW_counter],ROW_Pins[ROW_counter],DIO_PIN_INPUT);
 3bc:	8c 2f       	mov	r24, r28
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	fc 01       	movw	r30, r24
 3c2:	ec 59       	subi	r30, 0x9C	; 156
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	dc 01       	movw	r26, r24
 3c8:	a4 59       	subi	r26, 0x94	; 148
 3ca:	bf 4f       	sbci	r27, 0xFF	; 255
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	60 81       	ld	r22, Z
 3d0:	8c 91       	ld	r24, X
 3d2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_setPinDirection>
{
	if (KEYPADId < KEYPAD_NUM)
	{u8 ROW_counter=0,COL_counter=0;
		
		//ROWS >> input
		for (ROW_counter=0;ROW_counter<KEYPAD_ROWPINSNUM;ROW_counter++)
 3d6:	cf 5f       	subi	r28, 0xFF	; 255
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <KEYPAD_init+0x2a>
 3da:	c0 e0       	ldi	r28, 0x00	; 0
 3dc:	c4 30       	cpi	r28, 0x04	; 4
 3de:	70 f3       	brcs	.-36     	; 0x3bc <KEYPAD_init+0xa>
 3e0:	c0 e0       	ldi	r28, 0x00	; 0
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <__EEPROM_REGION_LENGTH__>
		}
		
		//COLS >> output
		for (COL_counter=0;COL_counter<KEYPAD_COLPINSNUM;COL_counter++)
		{
			DIO_setPinDirection(COL_Ports[COL_counter],COL_Pins[COL_counter],DIO_PIN_OUTPUT);
 3e4:	8c 2f       	mov	r24, r28
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fc 01       	movw	r30, r24
 3ea:	e0 5a       	subi	r30, 0xA0	; 160
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	dc 01       	movw	r26, r24
 3f0:	a8 59       	subi	r26, 0x98	; 152
 3f2:	bf 4f       	sbci	r27, 0xFF	; 255
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	60 81       	ld	r22, Z
 3f8:	8c 91       	ld	r24, X
 3fa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_setPinDirection>
		{
			DIO_setPinDirection(ROW_Ports[ROW_counter],ROW_Pins[ROW_counter],DIO_PIN_INPUT);
		}
		
		//COLS >> output
		for (COL_counter=0;COL_counter<KEYPAD_COLPINSNUM;COL_counter++)
 3fe:	cf 5f       	subi	r28, 0xFF	; 255
 400:	c4 30       	cpi	r28, 0x04	; 4
 402:	80 f3       	brcs	.-32     	; 0x3e4 <KEYPAD_init+0x32>
 404:	c0 e0       	ldi	r28, 0x00	; 0
 406:	0d c0       	rjmp	.+26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		}
		
		//active internal pull up (ROWS initial value are ones)
		for (ROW_counter=0;ROW_counter<KEYPAD_ROWPINSNUM;ROW_counter++)
		{
			DIO_activePinInPullUpResistance(ROW_Ports[ROW_counter],ROW_Pins[ROW_counter]);
 408:	8c 2f       	mov	r24, r28
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	fc 01       	movw	r30, r24
 40e:	ec 59       	subi	r30, 0x9C	; 156
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	dc 01       	movw	r26, r24
 414:	a4 59       	subi	r26, 0x94	; 148
 416:	bf 4f       	sbci	r27, 0xFF	; 255
 418:	60 81       	ld	r22, Z
 41a:	8c 91       	ld	r24, X
 41c:	0e 94 3a 06 	call	0xc74	; 0xc74 <DIO_activePinInPullUpResistance>
		{
			DIO_setPinDirection(COL_Ports[COL_counter],COL_Pins[COL_counter],DIO_PIN_OUTPUT);
		}
		
		//active internal pull up (ROWS initial value are ones)
		for (ROW_counter=0;ROW_counter<KEYPAD_ROWPINSNUM;ROW_counter++)
 420:	cf 5f       	subi	r28, 0xFF	; 255
 422:	c4 30       	cpi	r28, 0x04	; 4
 424:	88 f3       	brcs	.-30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		}
	}else
	{
		return KEYPADIdError;
	}
	return KEYPADNoError;
 426:	80 e0       	ldi	r24, 0x00	; 0
}
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <KEYPAD_getValue>:
KEYPAD_ErrorStatus_t KEYPAD_getValue(u8 KEYPADId,u8* returnedValue)
{
 42c:	9f 92       	push	r9
 42e:	af 92       	push	r10
 430:	bf 92       	push	r11
 432:	cf 92       	push	r12
 434:	df 92       	push	r13
 436:	ef 92       	push	r14
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	1f 92       	push	r1
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
	if (KEYPADId < KEYPAD_NUM)
 448:	81 11       	cpse	r24, r1
 44a:	63 c0       	rjmp	.+198    	; 0x512 <KEYPAD_getValue+0xe6>
	{
			if(returnedValue != NULL)
 44c:	61 15       	cp	r22, r1
 44e:	71 05       	cpc	r23, r1
 450:	09 f4       	brne	.+2      	; 0x454 <KEYPAD_getValue+0x28>
 452:	61 c0       	rjmp	.+194    	; 0x516 <KEYPAD_getValue+0xea>
 454:	5b 01       	movw	r10, r22
			{
				*returnedValue = KEYPAD_NOT_PRESSED;
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	fb 01       	movw	r30, r22
 45a:	80 83       	st	Z, r24
				
				u8 colsCounter,rowsCounter;
				u8 pinValue,pinFlag=0;
 45c:	91 2c       	mov	r9, r1
				for(colsCounter=0;colsCounter<KEYPAD_COLPINSNUM;colsCounter++)
 45e:	00 e0       	ldi	r16, 0x00	; 0
 460:	53 c0       	rjmp	.+166    	; 0x508 <KEYPAD_getValue+0xdc>
				{
					// Activate Each cols
					DIO_setPinValue(COL_Ports[colsCounter],COL_Pins[colsCounter],DIO_PIN_LOW);
 462:	c0 2e       	mov	r12, r16
 464:	d1 2c       	mov	r13, r1
 466:	d6 01       	movw	r26, r12
 468:	a0 5a       	subi	r26, 0xA0	; 160
 46a:	bf 4f       	sbci	r27, 0xFF	; 255
 46c:	f6 01       	movw	r30, r12
 46e:	e8 59       	subi	r30, 0x98	; 152
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	6c 91       	ld	r22, X
 476:	80 81       	ld	r24, Z
 478:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
					
					for(rowsCounter=0;rowsCounter<KEYPAD_ROWPINSNUM;rowsCounter++)
 47c:	10 e0       	ldi	r17, 0x00	; 0
 47e:	33 c0       	rjmp	.+102    	; 0x4e6 <KEYPAD_getValue+0xba>
					{
						DIO_getPinValue(ROW_Ports[rowsCounter],ROW_Pins[rowsCounter],&pinValue);
 480:	e1 2e       	mov	r14, r17
 482:	f1 2c       	mov	r15, r1
 484:	d7 01       	movw	r26, r14
 486:	ac 59       	subi	r26, 0x9C	; 156
 488:	bf 4f       	sbci	r27, 0xFF	; 255
 48a:	f7 01       	movw	r30, r14
 48c:	e4 59       	subi	r30, 0x94	; 148
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	ae 01       	movw	r20, r28
 492:	4f 5f       	subi	r20, 0xFF	; 255
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	6c 91       	ld	r22, X
 498:	80 81       	ld	r24, Z
 49a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_getPinValue>
						if(0 == pinValue)//pressed
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	81 11       	cpse	r24, r1
 4a2:	20 c0       	rjmp	.+64     	; 0x4e4 <KEYPAD_getValue+0xb8>
 4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <KEYPAD_getValue+0x94>
						{
							while(0 == pinValue)
							{
								DIO_getPinValue(ROW_Ports[rowsCounter],ROW_Pins[rowsCounter],&pinValue);
 4a6:	ae 01       	movw	r20, r28
 4a8:	4f 5f       	subi	r20, 0xFF	; 255
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	f7 01       	movw	r30, r14
 4ae:	ec 59       	subi	r30, 0x9C	; 156
 4b0:	ff 4f       	sbci	r31, 0xFF	; 255
 4b2:	60 81       	ld	r22, Z
 4b4:	f7 01       	movw	r30, r14
 4b6:	e4 59       	subi	r30, 0x94	; 148
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	80 81       	ld	r24, Z
 4bc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_getPinValue>
					for(rowsCounter=0;rowsCounter<KEYPAD_ROWPINSNUM;rowsCounter++)
					{
						DIO_getPinValue(ROW_Ports[rowsCounter],ROW_Pins[rowsCounter],&pinValue);
						if(0 == pinValue)//pressed
						{
							while(0 == pinValue)
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	88 23       	and	r24, r24
 4c4:	81 f3       	breq	.-32     	; 0x4a6 <KEYPAD_getValue+0x7a>
							{
								DIO_getPinValue(ROW_Ports[rowsCounter],ROW_Pins[rowsCounter],&pinValue);
							}
							*returnedValue = KEYPAD_pattern[rowsCounter][colsCounter];
 4c6:	f7 01       	movw	r30, r14
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	e0 59       	subi	r30, 0x90	; 144
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	ec 0d       	add	r30, r12
 4d6:	fd 1d       	adc	r31, r13
 4d8:	80 81       	ld	r24, Z
 4da:	f5 01       	movw	r30, r10
 4dc:	80 83       	st	Z, r24
							pinFlag=1;
 4de:	99 24       	eor	r9, r9
 4e0:	93 94       	inc	r9
							break;
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <KEYPAD_getValue+0xbe>
				for(colsCounter=0;colsCounter<KEYPAD_COLPINSNUM;colsCounter++)
				{
					// Activate Each cols
					DIO_setPinValue(COL_Ports[colsCounter],COL_Pins[colsCounter],DIO_PIN_LOW);
					
					for(rowsCounter=0;rowsCounter<KEYPAD_ROWPINSNUM;rowsCounter++)
 4e4:	1f 5f       	subi	r17, 0xFF	; 255
 4e6:	14 30       	cpi	r17, 0x04	; 4
 4e8:	58 f2       	brcs	.-106    	; 0x480 <KEYPAD_getValue+0x54>
						{
							//do nothing
						}
					}
					
					if(1 == pinFlag)
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	9f 16       	cp	r9, r31
 4ee:	79 f0       	breq	.+30     	; 0x50e <KEYPAD_getValue+0xe2>
					{
						break;
					}
					// Deactivate current cols
					DIO_setPinValue(COL_Ports[colsCounter],COL_Pins[colsCounter],DIO_PIN_HIGH);
 4f0:	d6 01       	movw	r26, r12
 4f2:	a0 5a       	subi	r26, 0xA0	; 160
 4f4:	bf 4f       	sbci	r27, 0xFF	; 255
 4f6:	f6 01       	movw	r30, r12
 4f8:	e8 59       	subi	r30, 0x98	; 152
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	6c 91       	ld	r22, X
 500:	80 81       	ld	r24, Z
 502:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
			{
				*returnedValue = KEYPAD_NOT_PRESSED;
				
				u8 colsCounter,rowsCounter;
				u8 pinValue,pinFlag=0;
				for(colsCounter=0;colsCounter<KEYPAD_COLPINSNUM;colsCounter++)
 506:	0f 5f       	subi	r16, 0xFF	; 255
 508:	04 30       	cpi	r16, 0x04	; 4
 50a:	08 f4       	brcc	.+2      	; 0x50e <KEYPAD_getValue+0xe2>
 50c:	aa cf       	rjmp	.-172    	; 0x462 <KEYPAD_getValue+0x36>
			}		
	}else
	{
		return KEYPADIdError;
	}
	return KEYPADNoError;	
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	03 c0       	rjmp	.+6      	; 0x518 <KEYPAD_getValue+0xec>
			{
				return KEYPADNULLPtrError;
			}		
	}else
	{
		return KEYPADIdError;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	01 c0       	rjmp	.+2      	; 0x518 <KEYPAD_getValue+0xec>
					DIO_setPinValue(COL_Ports[colsCounter],COL_Pins[colsCounter],DIO_PIN_HIGH);
				}
			}
			else
			{
				return KEYPADNULLPtrError;
 516:	82 e0       	ldi	r24, 0x02	; 2
	}else
	{
		return KEYPADIdError;
	}
	return KEYPADNoError;	
}
 518:	0f 90       	pop	r0
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	bf 90       	pop	r11
 52c:	af 90       	pop	r10
 52e:	9f 90       	pop	r9
 530:	08 95       	ret

00000532 <private_writeHalfPort>:
	{
		return LCD4BIdError;
	}
	
	return LCD4BNoError;
}
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	81 11       	cpse	r24, r1
 53c:	2a c0       	rjmp	.+84     	; 0x592 <private_writeHalfPort+0x60>
 53e:	06 2f       	mov	r16, r22
 540:	18 2f       	mov	r17, r24
 542:	c8 2f       	mov	r28, r24
 544:	cc 0f       	add	r28, r28
 546:	cc 0f       	add	r28, r28
 548:	d0 e0       	ldi	r29, 0x00	; 0
 54a:	14 c0       	rjmp	.+40     	; 0x574 <private_writeHalfPort+0x42>
 54c:	40 2f       	mov	r20, r16
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	0d 2e       	mov	r0, r29
 552:	02 c0       	rjmp	.+4      	; 0x558 <private_writeHalfPort+0x26>
 554:	55 95       	asr	r21
 556:	47 95       	ror	r20
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <private_writeHalfPort+0x22>
 55c:	41 70       	andi	r20, 0x01	; 1
 55e:	df 01       	movw	r26, r30
 560:	a0 58       	subi	r26, 0x80	; 128
 562:	bf 4f       	sbci	r27, 0xFF	; 255
 564:	e6 57       	subi	r30, 0x76	; 118
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	6c 91       	ld	r22, X
 56a:	80 81       	ld	r24, Z
 56c:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 570:	df 5f       	subi	r29, 0xFF	; 255
 572:	cf 5f       	subi	r28, 0xFF	; 255
 574:	ec 2f       	mov	r30, r28
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	21 2f       	mov	r18, r17
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	2f 5f       	subi	r18, 0xFF	; 255
 57e:	3f 4f       	sbci	r19, 0xFF	; 255
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	22 0f       	add	r18, r18
 586:	33 1f       	adc	r19, r19
 588:	e2 17       	cp	r30, r18
 58a:	f3 07       	cpc	r31, r19
 58c:	fc f2       	brlt	.-66     	; 0x54c <private_writeHalfPort+0x1a>
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	01 c0       	rjmp	.+2      	; 0x594 <private_writeHalfPort+0x62>
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	08 95       	ret

0000059e <LCD_4B_sendCmnd>:
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	81 11       	cpse	r24, r1
 5ac:	56 c0       	rjmp	.+172    	; 0x65a <LCD_4B_sendCmnd+0xbc>
 5ae:	06 2f       	mov	r16, r22
 5b0:	18 2f       	mov	r17, r24
 5b2:	c8 2f       	mov	r28, r24
 5b4:	d0 e0       	ldi	r29, 0x00	; 0
 5b6:	de 01       	movw	r26, r28
 5b8:	a8 57       	subi	r26, 0x78	; 120
 5ba:	bf 4f       	sbci	r27, 0xFF	; 255
 5bc:	fe 01       	movw	r30, r28
 5be:	e7 57       	subi	r30, 0x77	; 119
 5c0:	ff 4f       	sbci	r31, 0xFF	; 255
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	6c 91       	ld	r22, X
 5c6:	80 81       	ld	r24, Z
 5c8:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 5cc:	de 01       	movw	r26, r28
 5ce:	aa 57       	subi	r26, 0x7A	; 122
 5d0:	bf 4f       	sbci	r27, 0xFF	; 255
 5d2:	fe 01       	movw	r30, r28
 5d4:	e9 57       	subi	r30, 0x79	; 121
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	6c 91       	ld	r22, X
 5dc:	80 81       	ld	r24, Z
 5de:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 5e2:	60 2f       	mov	r22, r16
 5e4:	62 95       	swap	r22
 5e6:	6f 70       	andi	r22, 0x0F	; 15
 5e8:	81 2f       	mov	r24, r17
 5ea:	0e 94 99 02 	call	0x532	; 0x532 <private_writeHalfPort>
 5ee:	ce 01       	movw	r24, r28
 5f0:	8c 57       	subi	r24, 0x7C	; 124
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	7c 01       	movw	r14, r24
 5f6:	cb 57       	subi	r28, 0x7B	; 123
 5f8:	df 4f       	sbci	r29, 0xFF	; 255
 5fa:	41 e0       	ldi	r20, 0x01	; 1
 5fc:	fc 01       	movw	r30, r24
 5fe:	60 81       	ld	r22, Z
 600:	88 81       	ld	r24, Y
 602:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 606:	8f e9       	ldi	r24, 0x9F	; 159
 608:	9f e0       	ldi	r25, 0x0F	; 15
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_4B_sendCmnd+0x6c>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_4B_sendCmnd+0x72>
 610:	00 00       	nop
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	f7 01       	movw	r30, r14
 616:	60 81       	ld	r22, Z
 618:	88 81       	ld	r24, Y
 61a:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 61e:	60 2f       	mov	r22, r16
 620:	81 2f       	mov	r24, r17
 622:	0e 94 99 02 	call	0x532	; 0x532 <private_writeHalfPort>
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	f7 01       	movw	r30, r14
 62a:	60 81       	ld	r22, Z
 62c:	88 81       	ld	r24, Y
 62e:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 632:	8f e9       	ldi	r24, 0x9F	; 159
 634:	9f e0       	ldi	r25, 0x0F	; 15
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <LCD_4B_sendCmnd+0x98>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <LCD_4B_sendCmnd+0x9e>
 63c:	00 00       	nop
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	f7 01       	movw	r30, r14
 642:	60 81       	ld	r22, Z
 644:	88 81       	ld	r24, Y
 646:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 64a:	87 ec       	ldi	r24, 0xC7	; 199
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <LCD_4B_sendCmnd+0xb0>
 652:	00 c0       	rjmp	.+0      	; 0x654 <LCD_4B_sendCmnd+0xb6>
 654:	00 00       	nop
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	01 c0       	rjmp	.+2      	; 0x65c <LCD_4B_sendCmnd+0xbe>
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	08 95       	ret

0000066a <LCD_4B_init>:
 66a:	cf 92       	push	r12
 66c:	df 92       	push	r13
 66e:	ff 92       	push	r15
 670:	0f 93       	push	r16
 672:	1f 93       	push	r17
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	81 11       	cpse	r24, r1
 67a:	9f c0       	rjmp	.+318    	; 0x7ba <LCD_4B_init+0x150>
 67c:	f8 2e       	mov	r15, r24
 67e:	08 2f       	mov	r16, r24
 680:	10 e0       	ldi	r17, 0x00	; 0
 682:	d8 01       	movw	r26, r16
 684:	a8 57       	subi	r26, 0x78	; 120
 686:	bf 4f       	sbci	r27, 0xFF	; 255
 688:	f8 01       	movw	r30, r16
 68a:	e7 57       	subi	r30, 0x77	; 119
 68c:	ff 4f       	sbci	r31, 0xFF	; 255
 68e:	41 e0       	ldi	r20, 0x01	; 1
 690:	6c 91       	ld	r22, X
 692:	80 81       	ld	r24, Z
 694:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_setPinDirection>
 698:	d8 01       	movw	r26, r16
 69a:	aa 57       	subi	r26, 0x7A	; 122
 69c:	bf 4f       	sbci	r27, 0xFF	; 255
 69e:	f8 01       	movw	r30, r16
 6a0:	e9 57       	subi	r30, 0x79	; 121
 6a2:	ff 4f       	sbci	r31, 0xFF	; 255
 6a4:	41 e0       	ldi	r20, 0x01	; 1
 6a6:	6c 91       	ld	r22, X
 6a8:	80 81       	ld	r24, Z
 6aa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_setPinDirection>
 6ae:	d8 01       	movw	r26, r16
 6b0:	ac 57       	subi	r26, 0x7C	; 124
 6b2:	bf 4f       	sbci	r27, 0xFF	; 255
 6b4:	f8 01       	movw	r30, r16
 6b6:	eb 57       	subi	r30, 0x7B	; 123
 6b8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	6c 91       	ld	r22, X
 6be:	80 81       	ld	r24, Z
 6c0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_setPinDirection>
 6c4:	cf 2d       	mov	r28, r15
 6c6:	cc 0f       	add	r28, r28
 6c8:	cc 0f       	add	r28, r28
 6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <LCD_4B_init+0x7a>
 6cc:	f9 01       	movw	r30, r18
 6ce:	e0 58       	subi	r30, 0x80	; 128
 6d0:	ff 4f       	sbci	r31, 0xFF	; 255
 6d2:	d9 01       	movw	r26, r18
 6d4:	a6 57       	subi	r26, 0x76	; 118
 6d6:	bf 4f       	sbci	r27, 0xFF	; 255
 6d8:	41 e0       	ldi	r20, 0x01	; 1
 6da:	60 81       	ld	r22, Z
 6dc:	8c 91       	ld	r24, X
 6de:	0e 94 e7 04 	call	0x9ce	; 0x9ce <DIO_setPinDirection>
 6e2:	cf 5f       	subi	r28, 0xFF	; 255
 6e4:	2c 2f       	mov	r18, r28
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	a8 01       	movw	r20, r16
 6ea:	4f 5f       	subi	r20, 0xFF	; 255
 6ec:	5f 4f       	sbci	r21, 0xFF	; 255
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	44 0f       	add	r20, r20
 6f4:	55 1f       	adc	r21, r21
 6f6:	24 17       	cp	r18, r20
 6f8:	35 07       	cpc	r19, r21
 6fa:	44 f3       	brlt	.-48     	; 0x6cc <LCD_4B_init+0x62>
 6fc:	2f ef       	ldi	r18, 0xFF	; 255
 6fe:	83 ef       	ldi	r24, 0xF3	; 243
 700:	91 e0       	ldi	r25, 0x01	; 1
 702:	21 50       	subi	r18, 0x01	; 1
 704:	80 40       	sbci	r24, 0x00	; 0
 706:	90 40       	sbci	r25, 0x00	; 0
 708:	e1 f7       	brne	.-8      	; 0x702 <LCD_4B_init+0x98>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <LCD_4B_init+0xa2>
 70c:	00 00       	nop
 70e:	d8 01       	movw	r26, r16
 710:	a8 57       	subi	r26, 0x78	; 120
 712:	bf 4f       	sbci	r27, 0xFF	; 255
 714:	f8 01       	movw	r30, r16
 716:	e7 57       	subi	r30, 0x77	; 119
 718:	ff 4f       	sbci	r31, 0xFF	; 255
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	6c 91       	ld	r22, X
 71e:	80 81       	ld	r24, Z
 720:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 724:	d8 01       	movw	r26, r16
 726:	aa 57       	subi	r26, 0x7A	; 122
 728:	bf 4f       	sbci	r27, 0xFF	; 255
 72a:	f8 01       	movw	r30, r16
 72c:	e9 57       	subi	r30, 0x79	; 121
 72e:	ff 4f       	sbci	r31, 0xFF	; 255
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	6c 91       	ld	r22, X
 734:	80 81       	ld	r24, Z
 736:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 73a:	62 e0       	ldi	r22, 0x02	; 2
 73c:	8f 2d       	mov	r24, r15
 73e:	0e 94 99 02 	call	0x532	; 0x532 <private_writeHalfPort>
 742:	f8 01       	movw	r30, r16
 744:	ec 57       	subi	r30, 0x7C	; 124
 746:	ff 4f       	sbci	r31, 0xFF	; 255
 748:	6f 01       	movw	r12, r30
 74a:	e8 01       	movw	r28, r16
 74c:	cb 57       	subi	r28, 0x7B	; 123
 74e:	df 4f       	sbci	r29, 0xFF	; 255
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	60 81       	ld	r22, Z
 754:	88 81       	ld	r24, Y
 756:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 75a:	8f e9       	ldi	r24, 0x9F	; 159
 75c:	9f e0       	ldi	r25, 0x0F	; 15
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <LCD_4B_init+0xf4>
 762:	00 c0       	rjmp	.+0      	; 0x764 <LCD_4B_init+0xfa>
 764:	00 00       	nop
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	f6 01       	movw	r30, r12
 76a:	60 81       	ld	r22, Z
 76c:	88 81       	ld	r24, Y
 76e:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 772:	68 e2       	ldi	r22, 0x28	; 40
 774:	8f 2d       	mov	r24, r15
 776:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
 77a:	87 ec       	ldi	r24, 0xC7	; 199
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	f1 f7       	brne	.-4      	; 0x77e <LCD_4B_init+0x114>
 782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_4B_init+0x11a>
 784:	00 00       	nop
 786:	6c e0       	ldi	r22, 0x0C	; 12
 788:	8f 2d       	mov	r24, r15
 78a:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
 78e:	e7 ec       	ldi	r30, 0xC7	; 199
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	31 97       	sbiw	r30, 0x01	; 1
 794:	f1 f7       	brne	.-4      	; 0x792 <LCD_4B_init+0x128>
 796:	00 c0       	rjmp	.+0      	; 0x798 <LCD_4B_init+0x12e>
 798:	00 00       	nop
 79a:	61 e0       	ldi	r22, 0x01	; 1
 79c:	8f 2d       	mov	r24, r15
 79e:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
 7a2:	8f e3       	ldi	r24, 0x3F	; 63
 7a4:	9f e1       	ldi	r25, 0x1F	; 31
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <LCD_4B_init+0x13c>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <LCD_4B_init+0x142>
 7ac:	00 00       	nop
 7ae:	66 e0       	ldi	r22, 0x06	; 6
 7b0:	8f 2d       	mov	r24, r15
 7b2:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <LCD_4B_init+0x152>
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	1f 91       	pop	r17
 7c2:	0f 91       	pop	r16
 7c4:	ff 90       	pop	r15
 7c6:	df 90       	pop	r13
 7c8:	cf 90       	pop	r12
 7ca:	08 95       	ret

000007cc <LCD_4B_clear>:
 7cc:	81 11       	cpse	r24, r1
 7ce:	0b c0       	rjmp	.+22     	; 0x7e6 <LCD_4B_clear+0x1a>
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
 7d6:	8f e3       	ldi	r24, 0x3F	; 63
 7d8:	9f e1       	ldi	r25, 0x1F	; 31
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	f1 f7       	brne	.-4      	; 0x7da <LCD_4B_clear+0xe>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <LCD_4B_clear+0x14>
 7e0:	00 00       	nop
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	08 95       	ret

000007ea <LCD_4B_goToSpecificPosition>:
 7ea:	81 11       	cpse	r24, r1
 7ec:	13 c0       	rjmp	.+38     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7ee:	40 31       	cpi	r20, 0x10	; 16
 7f0:	98 f4       	brcc	.+38     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7f2:	61 30       	cpi	r22, 0x01	; 1
 7f4:	19 f0       	breq	.+6      	; 0x7fc <LCD_4B_goToSpecificPosition+0x12>
 7f6:	62 30       	cpi	r22, 0x02	; 2
 7f8:	39 f0       	breq	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fa:	10 c0       	rjmp	.+32     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7fc:	60 e8       	ldi	r22, 0x80	; 128
 7fe:	64 0f       	add	r22, r20
 800:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret
 808:	60 ec       	ldi	r22, 0xC0	; 192
 80a:	64 0f       	add	r22, r20
 80c:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_4B_sendCmnd>
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	08 95       	ret
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	08 95       	ret
 818:	82 e0       	ldi	r24, 0x02	; 2
 81a:	08 95       	ret
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	08 95       	ret

00000820 <LCD_4B_sendChar>:
 820:	ef 92       	push	r14
 822:	ff 92       	push	r15
 824:	0f 93       	push	r16
 826:	1f 93       	push	r17
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
 82c:	81 11       	cpse	r24, r1
 82e:	50 c0       	rjmp	.+160    	; 0x8d0 <__stack+0x71>
 830:	06 2f       	mov	r16, r22
 832:	18 2f       	mov	r17, r24
 834:	c8 2f       	mov	r28, r24
 836:	d0 e0       	ldi	r29, 0x00	; 0
 838:	de 01       	movw	r26, r28
 83a:	a8 57       	subi	r26, 0x78	; 120
 83c:	bf 4f       	sbci	r27, 0xFF	; 255
 83e:	fe 01       	movw	r30, r28
 840:	e7 57       	subi	r30, 0x77	; 119
 842:	ff 4f       	sbci	r31, 0xFF	; 255
 844:	41 e0       	ldi	r20, 0x01	; 1
 846:	6c 91       	ld	r22, X
 848:	80 81       	ld	r24, Z
 84a:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 84e:	de 01       	movw	r26, r28
 850:	aa 57       	subi	r26, 0x7A	; 122
 852:	bf 4f       	sbci	r27, 0xFF	; 255
 854:	fe 01       	movw	r30, r28
 856:	e9 57       	subi	r30, 0x79	; 121
 858:	ff 4f       	sbci	r31, 0xFF	; 255
 85a:	40 e0       	ldi	r20, 0x00	; 0
 85c:	6c 91       	ld	r22, X
 85e:	80 81       	ld	r24, Z
 860:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 864:	60 2f       	mov	r22, r16
 866:	62 95       	swap	r22
 868:	6f 70       	andi	r22, 0x0F	; 15
 86a:	81 2f       	mov	r24, r17
 86c:	0e 94 99 02 	call	0x532	; 0x532 <private_writeHalfPort>
 870:	ce 01       	movw	r24, r28
 872:	8c 57       	subi	r24, 0x7C	; 124
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	7c 01       	movw	r14, r24
 878:	cb 57       	subi	r28, 0x7B	; 123
 87a:	df 4f       	sbci	r29, 0xFF	; 255
 87c:	41 e0       	ldi	r20, 0x01	; 1
 87e:	fc 01       	movw	r30, r24
 880:	60 81       	ld	r22, Z
 882:	88 81       	ld	r24, Y
 884:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 888:	8f e9       	ldi	r24, 0x9F	; 159
 88a:	9f e0       	ldi	r25, 0x0F	; 15
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	f1 f7       	brne	.-4      	; 0x88c <__stack+0x2d>
 890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
 892:	00 00       	nop
 894:	40 e0       	ldi	r20, 0x00	; 0
 896:	f7 01       	movw	r30, r14
 898:	60 81       	ld	r22, Z
 89a:	88 81       	ld	r24, Y
 89c:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 8a0:	60 2f       	mov	r22, r16
 8a2:	81 2f       	mov	r24, r17
 8a4:	0e 94 99 02 	call	0x532	; 0x532 <private_writeHalfPort>
 8a8:	41 e0       	ldi	r20, 0x01	; 1
 8aa:	f7 01       	movw	r30, r14
 8ac:	60 81       	ld	r22, Z
 8ae:	88 81       	ld	r24, Y
 8b0:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 8b4:	8f e9       	ldi	r24, 0x9F	; 159
 8b6:	9f e0       	ldi	r25, 0x0F	; 15
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
 8be:	00 00       	nop
 8c0:	40 e0       	ldi	r20, 0x00	; 0
 8c2:	f7 01       	movw	r30, r14
 8c4:	60 81       	ld	r22, Z
 8c6:	88 81       	ld	r24, Y
 8c8:	0e 94 6d 05 	call	0xada	; 0xada <DIO_setPinValue>
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__stack+0x73>
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	ff 90       	pop	r15
 8dc:	ef 90       	pop	r14
 8de:	08 95       	ret

000008e0 <LCD_4B_writeNumber>:
LCD4B_ErrorStatus_t LCD_4B_writeNumber(u8 LCD_4BId,s32 number)
{s32 reversedNum = 1;
 8e0:	8f 92       	push	r8
 8e2:	9f 92       	push	r9
 8e4:	af 92       	push	r10
 8e6:	bf 92       	push	r11
 8e8:	cf 92       	push	r12
 8ea:	df 92       	push	r13
 8ec:	ef 92       	push	r14
 8ee:	ff 92       	push	r15
 8f0:	cf 93       	push	r28
 8f2:	c8 2f       	mov	r28, r24
 8f4:	6a 01       	movw	r12, r20
 8f6:	7b 01       	movw	r14, r22
	if (LCD_4BId < LCD_4B_num)
 8f8:	81 11       	cpse	r24, r1
 8fa:	5e c0       	rjmp	.+188    	; 0x9b8 <LCD_4B_writeNumber+0xd8>
	{
		if(number == 0)
 8fc:	41 15       	cp	r20, r1
 8fe:	51 05       	cpc	r21, r1
 900:	61 05       	cpc	r22, r1
 902:	71 05       	cpc	r23, r1
 904:	29 f4       	brne	.+10     	; 0x910 <LCD_4B_writeNumber+0x30>
		{
			LCD_4B_sendChar(LCD_4BId,'0');
 906:	60 e3       	ldi	r22, 0x30	; 48
 908:	0e 94 10 04 	call	0x820	; 0x820 <LCD_4B_sendChar>
	}else
	{
		return LCD4BIdError;
	}
	
	return LCD4BNoError;
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	55 c0       	rjmp	.+170    	; 0x9ba <LCD_4B_writeNumber+0xda>
		{
			LCD_4B_sendChar(LCD_4BId,'0');
		}
		else
		{
			if (number < 0)
 910:	77 23       	and	r23, r23
 912:	5c f4       	brge	.+22     	; 0x92a <LCD_4B_writeNumber+0x4a>
			{
				LCD_4B_sendChar(LCD_4BId,'-');
 914:	6d e2       	ldi	r22, 0x2D	; 45
 916:	0e 94 10 04 	call	0x820	; 0x820 <LCD_4B_sendChar>
				
				number=number*-1;
 91a:	f0 94       	com	r15
 91c:	e0 94       	com	r14
 91e:	d0 94       	com	r13
 920:	c0 94       	com	r12
 922:	c1 1c       	adc	r12, r1
 924:	d1 1c       	adc	r13, r1
 926:	e1 1c       	adc	r14, r1
 928:	f1 1c       	adc	r15, r1
	}
	
	return LCD4BNoError;
}
LCD4B_ErrorStatus_t LCD_4B_writeNumber(u8 LCD_4BId,s32 number)
{s32 reversedNum = 1;
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	70 e0       	ldi	r23, 0x00	; 0
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	24 c0       	rjmp	.+72     	; 0x97c <LCD_4B_writeNumber+0x9c>
				//DO Nothing
			}
			// reverse
			while(number != 0)
			{
				reversedNum = (reversedNum*10)+(number%10);
 934:	dc 01       	movw	r26, r24
 936:	cb 01       	movw	r24, r22
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	aa 1f       	adc	r26, r26
 93e:	bb 1f       	adc	r27, r27
 940:	4c 01       	movw	r8, r24
 942:	5d 01       	movw	r10, r26
 944:	88 0c       	add	r8, r8
 946:	99 1c       	adc	r9, r9
 948:	aa 1c       	adc	r10, r10
 94a:	bb 1c       	adc	r11, r11
 94c:	88 0c       	add	r8, r8
 94e:	99 1c       	adc	r9, r9
 950:	aa 1c       	adc	r10, r10
 952:	bb 1c       	adc	r11, r11
 954:	88 0e       	add	r8, r24
 956:	99 1e       	adc	r9, r25
 958:	aa 1e       	adc	r10, r26
 95a:	bb 1e       	adc	r11, r27
 95c:	c7 01       	movw	r24, r14
 95e:	b6 01       	movw	r22, r12
 960:	2a e0       	ldi	r18, 0x0A	; 10
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	40 e0       	ldi	r20, 0x00	; 0
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divmodsi4>
 96c:	68 0d       	add	r22, r8
 96e:	79 1d       	adc	r23, r9
 970:	8a 1d       	adc	r24, r10
 972:	9b 1d       	adc	r25, r11
				number/=10;
 974:	c2 2e       	mov	r12, r18
 976:	d3 2e       	mov	r13, r19
 978:	e4 2e       	mov	r14, r20
 97a:	f5 2e       	mov	r15, r21
			}else
			{
				//DO Nothing
			}
			// reverse
			while(number != 0)
 97c:	c1 14       	cp	r12, r1
 97e:	d1 04       	cpc	r13, r1
 980:	e1 04       	cpc	r14, r1
 982:	f1 04       	cpc	r15, r1
 984:	b9 f6       	brne	.-82     	; 0x934 <LCD_4B_writeNumber+0x54>
			{
				reversedNum = (reversedNum*10)+(number%10);
				number/=10;
			}
			do
			{	LCD_4B_sendChar(LCD_4BId,((reversedNum%10)+'0'));
 986:	2a e0       	ldi	r18, 0x0A	; 10
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	40 e0       	ldi	r20, 0x00	; 0
 98c:	50 e0       	ldi	r21, 0x00	; 0
 98e:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divmodsi4>
 992:	c2 2e       	mov	r12, r18
 994:	d3 2e       	mov	r13, r19
 996:	e4 2e       	mov	r14, r20
 998:	f5 2e       	mov	r15, r21
 99a:	60 5d       	subi	r22, 0xD0	; 208
 99c:	8c 2f       	mov	r24, r28
 99e:	0e 94 10 04 	call	0x820	; 0x820 <LCD_4B_sendChar>
				reversedNum/=10;
 9a2:	6c 2d       	mov	r22, r12
 9a4:	7d 2d       	mov	r23, r13
 9a6:	8e 2d       	mov	r24, r14
 9a8:	9f 2d       	mov	r25, r15
			} while (reversedNum!=1);
 9aa:	61 30       	cpi	r22, 0x01	; 1
 9ac:	71 05       	cpc	r23, r1
 9ae:	81 05       	cpc	r24, r1
 9b0:	91 05       	cpc	r25, r1
 9b2:	49 f7       	brne	.-46     	; 0x986 <LCD_4B_writeNumber+0xa6>
	}else
	{
		return LCD4BIdError;
	}
	
	return LCD4BNoError;
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba <LCD_4B_writeNumber+0xda>
				reversedNum/=10;
			} while (reversedNum!=1);
		}
	}else
	{
		return LCD4BIdError;
 9b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return LCD4BNoError;
}
 9ba:	cf 91       	pop	r28
 9bc:	ff 90       	pop	r15
 9be:	ef 90       	pop	r14
 9c0:	df 90       	pop	r13
 9c2:	cf 90       	pop	r12
 9c4:	bf 90       	pop	r11
 9c6:	af 90       	pop	r10
 9c8:	9f 90       	pop	r9
 9ca:	8f 90       	pop	r8
 9cc:	08 95       	ret

000009ce <DIO_setPinDirection>:
	else
	{
		return PortIdError;
	}
	return NoError;
}
 9ce:	84 30       	cpi	r24, 0x04	; 4
 9d0:	08 f0       	brcs	.+2      	; 0x9d4 <DIO_setPinDirection+0x6>
 9d2:	7b c0       	rjmp	.+246    	; 0xaca <DIO_setPinDirection+0xfc>
 9d4:	68 30       	cpi	r22, 0x08	; 8
 9d6:	08 f0       	brcs	.+2      	; 0x9da <DIO_setPinDirection+0xc>
 9d8:	7a c0       	rjmp	.+244    	; 0xace <DIO_setPinDirection+0x100>
 9da:	42 30       	cpi	r20, 0x02	; 2
 9dc:	08 f0       	brcs	.+2      	; 0x9e0 <DIO_setPinDirection+0x12>
 9de:	79 c0       	rjmp	.+242    	; 0xad2 <DIO_setPinDirection+0x104>
 9e0:	81 30       	cpi	r24, 0x01	; 1
 9e2:	11 f1       	breq	.+68     	; 0xa28 <DIO_setPinDirection+0x5a>
 9e4:	30 f0       	brcs	.+12     	; 0x9f2 <DIO_setPinDirection+0x24>
 9e6:	82 30       	cpi	r24, 0x02	; 2
 9e8:	d1 f1       	breq	.+116    	; 0xa5e <DIO_setPinDirection+0x90>
 9ea:	83 30       	cpi	r24, 0x03	; 3
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <DIO_setPinDirection+0x22>
 9ee:	52 c0       	rjmp	.+164    	; 0xa94 <DIO_setPinDirection+0xc6>
 9f0:	72 c0       	rjmp	.+228    	; 0xad6 <DIO_setPinDirection+0x108>
 9f2:	41 30       	cpi	r20, 0x01	; 1
 9f4:	61 f4       	brne	.+24     	; 0xa0e <DIO_setPinDirection+0x40>
 9f6:	2a b3       	in	r18, 0x1a	; 26
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_setPinDirection+0x34>
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	6a 95       	dec	r22
 a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_setPinDirection+0x30>
 a06:	82 2b       	or	r24, r18
 a08:	8a bb       	out	0x1a, r24	; 26
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	08 95       	ret
 a0e:	2a b3       	in	r18, 0x1a	; 26
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_setPinDirection+0x4c>
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	6a 95       	dec	r22
 a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_setPinDirection+0x48>
 a1e:	80 95       	com	r24
 a20:	82 23       	and	r24, r18
 a22:	8a bb       	out	0x1a, r24	; 26
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	08 95       	ret
 a28:	41 30       	cpi	r20, 0x01	; 1
 a2a:	61 f4       	brne	.+24     	; 0xa44 <DIO_setPinDirection+0x76>
 a2c:	27 b3       	in	r18, 0x17	; 23
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_setPinDirection+0x6a>
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	6a 95       	dec	r22
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_setPinDirection+0x66>
 a3c:	82 2b       	or	r24, r18
 a3e:	87 bb       	out	0x17, r24	; 23
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	08 95       	ret
 a44:	27 b3       	in	r18, 0x17	; 23
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <DIO_setPinDirection+0x82>
 a4c:	88 0f       	add	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	6a 95       	dec	r22
 a52:	e2 f7       	brpl	.-8      	; 0xa4c <DIO_setPinDirection+0x7e>
 a54:	80 95       	com	r24
 a56:	82 23       	and	r24, r18
 a58:	87 bb       	out	0x17, r24	; 23
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	08 95       	ret
 a5e:	41 30       	cpi	r20, 0x01	; 1
 a60:	61 f4       	brne	.+24     	; 0xa7a <DIO_setPinDirection+0xac>
 a62:	24 b3       	in	r18, 0x14	; 20
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <DIO_setPinDirection+0xa0>
 a6a:	88 0f       	add	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	6a 95       	dec	r22
 a70:	e2 f7       	brpl	.-8      	; 0xa6a <DIO_setPinDirection+0x9c>
 a72:	82 2b       	or	r24, r18
 a74:	84 bb       	out	0x14, r24	; 20
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	08 95       	ret
 a7a:	24 b3       	in	r18, 0x14	; 20
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_setPinDirection+0xb8>
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	6a 95       	dec	r22
 a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_setPinDirection+0xb4>
 a8a:	80 95       	com	r24
 a8c:	82 23       	and	r24, r18
 a8e:	84 bb       	out	0x14, r24	; 20
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	08 95       	ret
 a94:	41 30       	cpi	r20, 0x01	; 1
 a96:	61 f4       	brne	.+24     	; 0xab0 <DIO_setPinDirection+0xe2>
 a98:	21 b3       	in	r18, 0x11	; 17
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_setPinDirection+0xd6>
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	6a 95       	dec	r22
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_setPinDirection+0xd2>
 aa8:	82 2b       	or	r24, r18
 aaa:	81 bb       	out	0x11, r24	; 17
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	08 95       	ret
 ab0:	21 b3       	in	r18, 0x11	; 17
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_setPinDirection+0xee>
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	6a 95       	dec	r22
 abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_setPinDirection+0xea>
 ac0:	80 95       	com	r24
 ac2:	82 23       	and	r24, r18
 ac4:	81 bb       	out	0x11, r24	; 17
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	08 95       	ret
 aca:	84 e0       	ldi	r24, 0x04	; 4
 acc:	08 95       	ret
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	08 95       	ret
 ad2:	82 e0       	ldi	r24, 0x02	; 2
 ad4:	08 95       	ret
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	08 95       	ret

00000ada <DIO_setPinValue>:
 ada:	84 30       	cpi	r24, 0x04	; 4
 adc:	08 f0       	brcs	.+2      	; 0xae0 <DIO_setPinValue+0x6>
 ade:	7b c0       	rjmp	.+246    	; 0xbd6 <DIO_setPinValue+0xfc>
 ae0:	68 30       	cpi	r22, 0x08	; 8
 ae2:	08 f0       	brcs	.+2      	; 0xae6 <DIO_setPinValue+0xc>
 ae4:	7a c0       	rjmp	.+244    	; 0xbda <DIO_setPinValue+0x100>
 ae6:	42 30       	cpi	r20, 0x02	; 2
 ae8:	08 f0       	brcs	.+2      	; 0xaec <DIO_setPinValue+0x12>
 aea:	79 c0       	rjmp	.+242    	; 0xbde <DIO_setPinValue+0x104>
 aec:	81 30       	cpi	r24, 0x01	; 1
 aee:	11 f1       	breq	.+68     	; 0xb34 <DIO_setPinValue+0x5a>
 af0:	30 f0       	brcs	.+12     	; 0xafe <DIO_setPinValue+0x24>
 af2:	82 30       	cpi	r24, 0x02	; 2
 af4:	d1 f1       	breq	.+116    	; 0xb6a <DIO_setPinValue+0x90>
 af6:	83 30       	cpi	r24, 0x03	; 3
 af8:	09 f4       	brne	.+2      	; 0xafc <DIO_setPinValue+0x22>
 afa:	52 c0       	rjmp	.+164    	; 0xba0 <DIO_setPinValue+0xc6>
 afc:	72 c0       	rjmp	.+228    	; 0xbe2 <DIO_setPinValue+0x108>
 afe:	41 30       	cpi	r20, 0x01	; 1
 b00:	61 f4       	brne	.+24     	; 0xb1a <DIO_setPinValue+0x40>
 b02:	2b b3       	in	r18, 0x1b	; 27
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_setPinValue+0x34>
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	6a 95       	dec	r22
 b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_setPinValue+0x30>
 b12:	82 2b       	or	r24, r18
 b14:	8b bb       	out	0x1b, r24	; 27
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	08 95       	ret
 b1a:	2b b3       	in	r18, 0x1b	; 27
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <DIO_setPinValue+0x4c>
 b22:	88 0f       	add	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	6a 95       	dec	r22
 b28:	e2 f7       	brpl	.-8      	; 0xb22 <DIO_setPinValue+0x48>
 b2a:	80 95       	com	r24
 b2c:	82 23       	and	r24, r18
 b2e:	8b bb       	out	0x1b, r24	; 27
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	08 95       	ret
 b34:	41 30       	cpi	r20, 0x01	; 1
 b36:	61 f4       	brne	.+24     	; 0xb50 <DIO_setPinValue+0x76>
 b38:	28 b3       	in	r18, 0x18	; 24
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <DIO_setPinValue+0x6a>
 b40:	88 0f       	add	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	6a 95       	dec	r22
 b46:	e2 f7       	brpl	.-8      	; 0xb40 <DIO_setPinValue+0x66>
 b48:	82 2b       	or	r24, r18
 b4a:	88 bb       	out	0x18, r24	; 24
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	08 95       	ret
 b50:	28 b3       	in	r18, 0x18	; 24
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_setPinValue+0x82>
 b58:	88 0f       	add	r24, r24
 b5a:	99 1f       	adc	r25, r25
 b5c:	6a 95       	dec	r22
 b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_setPinValue+0x7e>
 b60:	80 95       	com	r24
 b62:	82 23       	and	r24, r18
 b64:	88 bb       	out	0x18, r24	; 24
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	08 95       	ret
 b6a:	41 30       	cpi	r20, 0x01	; 1
 b6c:	61 f4       	brne	.+24     	; 0xb86 <DIO_setPinValue+0xac>
 b6e:	25 b3       	in	r18, 0x15	; 21
 b70:	81 e0       	ldi	r24, 0x01	; 1
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_setPinValue+0xa0>
 b76:	88 0f       	add	r24, r24
 b78:	99 1f       	adc	r25, r25
 b7a:	6a 95       	dec	r22
 b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_setPinValue+0x9c>
 b7e:	82 2b       	or	r24, r18
 b80:	85 bb       	out	0x15, r24	; 21
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	08 95       	ret
 b86:	25 b3       	in	r18, 0x15	; 21
 b88:	81 e0       	ldi	r24, 0x01	; 1
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	02 c0       	rjmp	.+4      	; 0xb92 <DIO_setPinValue+0xb8>
 b8e:	88 0f       	add	r24, r24
 b90:	99 1f       	adc	r25, r25
 b92:	6a 95       	dec	r22
 b94:	e2 f7       	brpl	.-8      	; 0xb8e <DIO_setPinValue+0xb4>
 b96:	80 95       	com	r24
 b98:	82 23       	and	r24, r18
 b9a:	85 bb       	out	0x15, r24	; 21
 b9c:	80 e0       	ldi	r24, 0x00	; 0
 b9e:	08 95       	ret
 ba0:	41 30       	cpi	r20, 0x01	; 1
 ba2:	61 f4       	brne	.+24     	; 0xbbc <DIO_setPinValue+0xe2>
 ba4:	22 b3       	in	r18, 0x12	; 18
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <DIO_setPinValue+0xd6>
 bac:	88 0f       	add	r24, r24
 bae:	99 1f       	adc	r25, r25
 bb0:	6a 95       	dec	r22
 bb2:	e2 f7       	brpl	.-8      	; 0xbac <DIO_setPinValue+0xd2>
 bb4:	82 2b       	or	r24, r18
 bb6:	82 bb       	out	0x12, r24	; 18
 bb8:	80 e0       	ldi	r24, 0x00	; 0
 bba:	08 95       	ret
 bbc:	22 b3       	in	r18, 0x12	; 18
 bbe:	81 e0       	ldi	r24, 0x01	; 1
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO_setPinValue+0xee>
 bc4:	88 0f       	add	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	6a 95       	dec	r22
 bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO_setPinValue+0xea>
 bcc:	80 95       	com	r24
 bce:	82 23       	and	r24, r18
 bd0:	82 bb       	out	0x12, r24	; 18
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	08 95       	ret
 bd6:	84 e0       	ldi	r24, 0x04	; 4
 bd8:	08 95       	ret
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	08 95       	ret
 bde:	83 e0       	ldi	r24, 0x03	; 3
 be0:	08 95       	ret
 be2:	80 e0       	ldi	r24, 0x00	; 0
 be4:	08 95       	ret

00000be6 <DIO_getPinValue>:


DIO_ErrorStatus_t DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
	if(PortId<=3)
 be6:	84 30       	cpi	r24, 0x04	; 4
 be8:	e8 f5       	brcc	.+122    	; 0xc64 <DIO_getPinValue+0x7e>
	{
		if (PinId<=7)
 bea:	68 30       	cpi	r22, 0x08	; 8
 bec:	e8 f5       	brcc	.+122    	; 0xc68 <DIO_getPinValue+0x82>
		{
			if (PinValue!= NULL)
 bee:	41 15       	cp	r20, r1
 bf0:	51 05       	cpc	r21, r1
 bf2:	e1 f1       	breq	.+120    	; 0xc6c <DIO_getPinValue+0x86>
			{
				switch(PortId)
 bf4:	81 30       	cpi	r24, 0x01	; 1
 bf6:	91 f0       	breq	.+36     	; 0xc1c <DIO_getPinValue+0x36>
 bf8:	28 f0       	brcs	.+10     	; 0xc04 <DIO_getPinValue+0x1e>
 bfa:	82 30       	cpi	r24, 0x02	; 2
 bfc:	d9 f0       	breq	.+54     	; 0xc34 <DIO_getPinValue+0x4e>
 bfe:	83 30       	cpi	r24, 0x03	; 3
 c00:	29 f1       	breq	.+74     	; 0xc4c <DIO_getPinValue+0x66>
 c02:	36 c0       	rjmp	.+108    	; 0xc70 <DIO_getPinValue+0x8a>
				{
					case DIO_PORTA:
					*PinValue = GET_BIT(PINA,PinId);
 c04:	89 b3       	in	r24, 0x19	; 25
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_getPinValue+0x28>
 c0a:	95 95       	asr	r25
 c0c:	87 95       	ror	r24
 c0e:	6a 95       	dec	r22
 c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_getPinValue+0x24>
 c12:	81 70       	andi	r24, 0x01	; 1
 c14:	fa 01       	movw	r30, r20
 c16:	80 83       	st	Z, r24
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 c18:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch(PortId)
				{
					case DIO_PORTA:
					*PinValue = GET_BIT(PINA,PinId);
					break;
 c1a:	08 95       	ret
					
					case DIO_PORTB:
					*PinValue = GET_BIT(PINB,PinId);
 c1c:	86 b3       	in	r24, 0x16	; 22
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_getPinValue+0x40>
 c22:	95 95       	asr	r25
 c24:	87 95       	ror	r24
 c26:	6a 95       	dec	r22
 c28:	e2 f7       	brpl	.-8      	; 0xc22 <DIO_getPinValue+0x3c>
 c2a:	81 70       	andi	r24, 0x01	; 1
 c2c:	fa 01       	movw	r30, r20
 c2e:	80 83       	st	Z, r24
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 c30:	80 e0       	ldi	r24, 0x00	; 0
					*PinValue = GET_BIT(PINA,PinId);
					break;
					
					case DIO_PORTB:
					*PinValue = GET_BIT(PINB,PinId);
					break;
 c32:	08 95       	ret
					
					case DIO_PORTC:
					*PinValue = GET_BIT(PINC,PinId);
 c34:	83 b3       	in	r24, 0x13	; 19
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_getPinValue+0x58>
 c3a:	95 95       	asr	r25
 c3c:	87 95       	ror	r24
 c3e:	6a 95       	dec	r22
 c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_getPinValue+0x54>
 c42:	81 70       	andi	r24, 0x01	; 1
 c44:	fa 01       	movw	r30, r20
 c46:	80 83       	st	Z, r24
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 c48:	80 e0       	ldi	r24, 0x00	; 0
					*PinValue = GET_BIT(PINB,PinId);
					break;
					
					case DIO_PORTC:
					*PinValue = GET_BIT(PINC,PinId);
					break;
 c4a:	08 95       	ret
					
					case DIO_PORTD:
					*PinValue = GET_BIT(PIND,PinId);
 c4c:	80 b3       	in	r24, 0x10	; 16
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_getPinValue+0x70>
 c52:	95 95       	asr	r25
 c54:	87 95       	ror	r24
 c56:	6a 95       	dec	r22
 c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_getPinValue+0x6c>
 c5a:	81 70       	andi	r24, 0x01	; 1
 c5c:	fa 01       	movw	r30, r20
 c5e:	80 83       	st	Z, r24
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 c60:	80 e0       	ldi	r24, 0x00	; 0
					*PinValue = GET_BIT(PINC,PinId);
					break;
					
					case DIO_PORTD:
					*PinValue = GET_BIT(PIND,PinId);
					break;
 c62:	08 95       	ret
		}
		
	}
	else
	{
		return PortIdError;
 c64:	84 e0       	ldi	r24, 0x04	; 4
 c66:	08 95       	ret
			{
				return NullPtrError;
			}
		}else
		{
			return PinIdError;
 c68:	81 e0       	ldi	r24, 0x01	; 1
 c6a:	08 95       	ret
					*PinValue = GET_BIT(PIND,PinId);
					break;
				}
			}else
			{
				return NullPtrError;
 c6c:	87 e0       	ldi	r24, 0x07	; 7
 c6e:	08 95       	ret
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 c70:	80 e0       	ldi	r24, 0x00	; 0
}
 c72:	08 95       	ret

00000c74 <DIO_activePinInPullUpResistance>:


DIO_ErrorStatus_t DIO_activePinInPullUpResistance(u8 PortId, u8 PinId)
{
	if(PortId<=3)
 c74:	84 30       	cpi	r24, 0x04	; 4
 c76:	d0 f5       	brcc	.+116    	; 0xcec <DIO_activePinInPullUpResistance+0x78>
	{
		if (PinId<=7)
 c78:	68 30       	cpi	r22, 0x08	; 8
 c7a:	d0 f5       	brcc	.+116    	; 0xcf0 <DIO_activePinInPullUpResistance+0x7c>
		{
			switch(PortId)
 c7c:	81 30       	cpi	r24, 0x01	; 1
 c7e:	91 f0       	breq	.+36     	; 0xca4 <DIO_activePinInPullUpResistance+0x30>
 c80:	28 f0       	brcs	.+10     	; 0xc8c <DIO_activePinInPullUpResistance+0x18>
 c82:	82 30       	cpi	r24, 0x02	; 2
 c84:	d9 f0       	breq	.+54     	; 0xcbc <DIO_activePinInPullUpResistance+0x48>
 c86:	83 30       	cpi	r24, 0x03	; 3
 c88:	29 f1       	breq	.+74     	; 0xcd4 <DIO_activePinInPullUpResistance+0x60>
 c8a:	34 c0       	rjmp	.+104    	; 0xcf4 <DIO_activePinInPullUpResistance+0x80>
			{
				case DIO_PORTA:
				SET_BIT(PORTA,PinId);
 c8c:	2b b3       	in	r18, 0x1b	; 27
 c8e:	81 e0       	ldi	r24, 0x01	; 1
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_activePinInPullUpResistance+0x24>
 c94:	88 0f       	add	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	6a 95       	dec	r22
 c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_activePinInPullUpResistance+0x20>
 c9c:	82 2b       	or	r24, r18
 c9e:	8b bb       	out	0x1b, r24	; 27
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 ca0:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(PortId)
			{
				case DIO_PORTA:
				SET_BIT(PORTA,PinId);
				break;
 ca2:	08 95       	ret
				
				case DIO_PORTB:
				SET_BIT(PORTB,PinId);
 ca4:	28 b3       	in	r18, 0x18	; 24
 ca6:	81 e0       	ldi	r24, 0x01	; 1
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_activePinInPullUpResistance+0x3c>
 cac:	88 0f       	add	r24, r24
 cae:	99 1f       	adc	r25, r25
 cb0:	6a 95       	dec	r22
 cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_activePinInPullUpResistance+0x38>
 cb4:	82 2b       	or	r24, r18
 cb6:	88 bb       	out	0x18, r24	; 24
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 cb8:	80 e0       	ldi	r24, 0x00	; 0
				SET_BIT(PORTA,PinId);
				break;
				
				case DIO_PORTB:
				SET_BIT(PORTB,PinId);
				break;
 cba:	08 95       	ret
				
				case DIO_PORTC:
				SET_BIT(PORTC,PinId);
 cbc:	25 b3       	in	r18, 0x15	; 21
 cbe:	81 e0       	ldi	r24, 0x01	; 1
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <DIO_activePinInPullUpResistance+0x54>
 cc4:	88 0f       	add	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	6a 95       	dec	r22
 cca:	e2 f7       	brpl	.-8      	; 0xcc4 <DIO_activePinInPullUpResistance+0x50>
 ccc:	82 2b       	or	r24, r18
 cce:	85 bb       	out	0x15, r24	; 21
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 cd0:	80 e0       	ldi	r24, 0x00	; 0
				SET_BIT(PORTB,PinId);
				break;
				
				case DIO_PORTC:
				SET_BIT(PORTC,PinId);
				break;
 cd2:	08 95       	ret
				
				case DIO_PORTD:
				SET_BIT(PORTD,PinId);
 cd4:	22 b3       	in	r18, 0x12	; 18
 cd6:	81 e0       	ldi	r24, 0x01	; 1
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_activePinInPullUpResistance+0x6c>
 cdc:	88 0f       	add	r24, r24
 cde:	99 1f       	adc	r25, r25
 ce0:	6a 95       	dec	r22
 ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_activePinInPullUpResistance+0x68>
 ce4:	82 2b       	or	r24, r18
 ce6:	82 bb       	out	0x12, r24	; 18
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 ce8:	80 e0       	ldi	r24, 0x00	; 0
				SET_BIT(PORTC,PinId);
				break;
				
				case DIO_PORTD:
				SET_BIT(PORTD,PinId);
				break;
 cea:	08 95       	ret
			return PinIdError;
		}
	}
	else
	{
		return PortIdError;
 cec:	84 e0       	ldi	r24, 0x04	; 4
 cee:	08 95       	ret
				SET_BIT(PORTD,PinId);
				break;
			}
		}else
		{
			return PinIdError;
 cf0:	81 e0       	ldi	r24, 0x01	; 1
 cf2:	08 95       	ret
	}
	else
	{
		return PortIdError;
	}
	return NoError;
 cf4:	80 e0       	ldi	r24, 0x00	; 0
}
 cf6:	08 95       	ret

00000cf8 <__mulsi3>:
 cf8:	db 01       	movw	r26, r22
 cfa:	8f 93       	push	r24
 cfc:	9f 93       	push	r25
 cfe:	0e 94 ab 06 	call	0xd56	; 0xd56 <__muluhisi3>
 d02:	bf 91       	pop	r27
 d04:	af 91       	pop	r26
 d06:	a2 9f       	mul	r26, r18
 d08:	80 0d       	add	r24, r0
 d0a:	91 1d       	adc	r25, r1
 d0c:	a3 9f       	mul	r26, r19
 d0e:	90 0d       	add	r25, r0
 d10:	b2 9f       	mul	r27, r18
 d12:	90 0d       	add	r25, r0
 d14:	11 24       	eor	r1, r1
 d16:	08 95       	ret

00000d18 <__divmodsi4>:
 d18:	05 2e       	mov	r0, r21
 d1a:	97 fb       	bst	r25, 7
 d1c:	1e f4       	brtc	.+6      	; 0xd24 <__divmodsi4+0xc>
 d1e:	00 94       	com	r0
 d20:	0e 94 a3 06 	call	0xd46	; 0xd46 <__negsi2>
 d24:	57 fd       	sbrc	r21, 7
 d26:	07 d0       	rcall	.+14     	; 0xd36 <__divmodsi4_neg2>
 d28:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__udivmodsi4>
 d2c:	07 fc       	sbrc	r0, 7
 d2e:	03 d0       	rcall	.+6      	; 0xd36 <__divmodsi4_neg2>
 d30:	4e f4       	brtc	.+18     	; 0xd44 <__divmodsi4_exit>
 d32:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__negsi2>

00000d36 <__divmodsi4_neg2>:
 d36:	50 95       	com	r21
 d38:	40 95       	com	r20
 d3a:	30 95       	com	r19
 d3c:	21 95       	neg	r18
 d3e:	3f 4f       	sbci	r19, 0xFF	; 255
 d40:	4f 4f       	sbci	r20, 0xFF	; 255
 d42:	5f 4f       	sbci	r21, 0xFF	; 255

00000d44 <__divmodsi4_exit>:
 d44:	08 95       	ret

00000d46 <__negsi2>:
 d46:	90 95       	com	r25
 d48:	80 95       	com	r24
 d4a:	70 95       	com	r23
 d4c:	61 95       	neg	r22
 d4e:	7f 4f       	sbci	r23, 0xFF	; 255
 d50:	8f 4f       	sbci	r24, 0xFF	; 255
 d52:	9f 4f       	sbci	r25, 0xFF	; 255
 d54:	08 95       	ret

00000d56 <__muluhisi3>:
 d56:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__umulhisi3>
 d5a:	a5 9f       	mul	r26, r21
 d5c:	90 0d       	add	r25, r0
 d5e:	b4 9f       	mul	r27, r20
 d60:	90 0d       	add	r25, r0
 d62:	a4 9f       	mul	r26, r20
 d64:	80 0d       	add	r24, r0
 d66:	91 1d       	adc	r25, r1
 d68:	11 24       	eor	r1, r1
 d6a:	08 95       	ret

00000d6c <__udivmodsi4>:
 d6c:	a1 e2       	ldi	r26, 0x21	; 33
 d6e:	1a 2e       	mov	r1, r26
 d70:	aa 1b       	sub	r26, r26
 d72:	bb 1b       	sub	r27, r27
 d74:	fd 01       	movw	r30, r26
 d76:	0d c0       	rjmp	.+26     	; 0xd92 <__udivmodsi4_ep>

00000d78 <__udivmodsi4_loop>:
 d78:	aa 1f       	adc	r26, r26
 d7a:	bb 1f       	adc	r27, r27
 d7c:	ee 1f       	adc	r30, r30
 d7e:	ff 1f       	adc	r31, r31
 d80:	a2 17       	cp	r26, r18
 d82:	b3 07       	cpc	r27, r19
 d84:	e4 07       	cpc	r30, r20
 d86:	f5 07       	cpc	r31, r21
 d88:	20 f0       	brcs	.+8      	; 0xd92 <__udivmodsi4_ep>
 d8a:	a2 1b       	sub	r26, r18
 d8c:	b3 0b       	sbc	r27, r19
 d8e:	e4 0b       	sbc	r30, r20
 d90:	f5 0b       	sbc	r31, r21

00000d92 <__udivmodsi4_ep>:
 d92:	66 1f       	adc	r22, r22
 d94:	77 1f       	adc	r23, r23
 d96:	88 1f       	adc	r24, r24
 d98:	99 1f       	adc	r25, r25
 d9a:	1a 94       	dec	r1
 d9c:	69 f7       	brne	.-38     	; 0xd78 <__udivmodsi4_loop>
 d9e:	60 95       	com	r22
 da0:	70 95       	com	r23
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	9b 01       	movw	r18, r22
 da8:	ac 01       	movw	r20, r24
 daa:	bd 01       	movw	r22, r26
 dac:	cf 01       	movw	r24, r30
 dae:	08 95       	ret

00000db0 <__umulhisi3>:
 db0:	a2 9f       	mul	r26, r18
 db2:	b0 01       	movw	r22, r0
 db4:	b3 9f       	mul	r27, r19
 db6:	c0 01       	movw	r24, r0
 db8:	a3 9f       	mul	r26, r19
 dba:	70 0d       	add	r23, r0
 dbc:	81 1d       	adc	r24, r1
 dbe:	11 24       	eor	r1, r1
 dc0:	91 1d       	adc	r25, r1
 dc2:	b2 9f       	mul	r27, r18
 dc4:	70 0d       	add	r23, r0
 dc6:	81 1d       	adc	r24, r1
 dc8:	11 24       	eor	r1, r1
 dca:	91 1d       	adc	r25, r1
 dcc:	08 95       	ret

00000dce <_exit>:
 dce:	f8 94       	cli

00000dd0 <__stop_program>:
 dd0:	ff cf       	rjmp	.-2      	; 0xdd0 <__stop_program>
